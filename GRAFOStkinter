import tkinter as tk
from tkinter import messagebox
import math

class GrafoEstadosApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Recorrido de Estados Mexicanos")
        self.root.geometry("900x650")
        
        self.estados = ["CDMX", "Jalisco", "Nuevo León", "Veracruz", "Puebla", "Michoacán", "Quintana Roo"]
        self.conexiones = [
            ("CDMX", "Jalisco", 5),
            ("CDMX", "Puebla", 2),
            ("CDMX", "Veracruz", 4),
            ("Jalisco", "Nuevo León", 8),
            ("Jalisco", "Michoacán", 3),
            ("Nuevo León", "Quintana Roo", 12),
            ("Veracruz", "Puebla", 2),
            ("Veracruz", "Quintana Roo", 10),
            ("Puebla", "Michoacán", 4),
            ("Michoacán", "Quintana Roo", 11)
        ]
        
        self.posiciones = {
            "CDMX": (300, 250),
            "Jalisco": (200, 150),
            "Nuevo León": (100, 100),
            "Veracruz": (400, 200),
            "Puebla": (350, 300),
            "Michoacán": (250, 350),
            "Quintana Roo": (150, 400)
        }
        
        self.setup_ui()
    
    def setup_ui(self):
        control_frame = tk.Frame(self.root, padx=10, pady=10, bg="#f0f0f0")
        control_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        self.grafo_frame = tk.Frame(self.root, bg="white")
        self.grafo_frame.pack(side=tk.RIGHT, expand=True, fill=tk.BOTH)
        
        tk.Label(control_frame, text="7 Estados Mexicanos", 
                font=('Arial', 14, 'bold'), bg="#f0f0f0").pack(pady=10)
        
        estados_text = tk.Text(control_frame, height=7, width=20, bg="white")
        estados_text.pack()
        estados_text.insert(tk.END, "\n".join(self.estados))
        estados_text.config(state=tk.DISABLED)
        
        tk.Label(control_frame, text="Conexiones:", bg="#f0f0f0").pack(pady=(10,0))
        conexiones_text = tk.Text(control_frame, height=10, width=30, bg="white")
        conexiones_text.pack()
        
        for conexion in self.conexiones:
            conexiones_text.insert(tk.END, f"{conexion[0]} ↔ {conexion[1]} ({conexion[2]} hrs)\n")
        conexiones_text.config(state=tk.DISABLED)
        
        tk.Button(control_frame, text="Recorrido sin repetir", 
                 command=self.recorrido_sin_repetir, bg="#4CAF50", fg="white").pack(pady=5, fill=tk.X)
        tk.Button(control_frame, text="Recorrido con repeticiones", 
                 command=self.recorrido_con_repeticiones, bg="#2196F3", fg="white").pack(pady=5, fill=tk.X)
        
        self.resultado = tk.Text(control_frame, height=5, width=30, bg="white")
        self.resultado.pack(pady=10)
        
        self.dibujar_grafo()
    
    def dibujar_grafo(self):
        self.canvas = tk.Canvas(self.grafo_frame, bg="white")
        self.canvas.pack(expand=True, fill=tk.BOTH)
        
        for conexion in self.conexiones:
            x1, y1 = self.posiciones[conexion[0]]
            x2, y2 = self.posiciones[conexion[1]]
            self.canvas.create_line(x1, y1, x2, y2, width=2, fill="gray")
            
            mid_x = (x1 + x2) / 2
            mid_y = (y1 + y2) / 2
            self.canvas.create_text(mid_x, mid_y, text=str(conexion[2]), fill="black")
        
        for estado, (x, y) in self.posiciones.items():
            self.canvas.create_oval(x-20, y-20, x+20, y+20, fill="lightblue", outline="black")
            self.canvas.create_text(x, y, text=estado, font=('Arial', 8, 'bold'))
    
    def recorrido_sin_repetir(self):
        recorrido = ["CDMX", "Puebla", "Veracruz", "Quintana Roo", "Michoacán", "Jalisco", "Nuevo León"]
        costo = 42
        
        self.mostrar_resultado("Recorrido sin repetir:", recorrido, costo)
        self.resaltar_recorrido(recorrido)
    
    def recorrido_con_repeticiones(self):
        recorrido = ["CDMX", "Puebla", "Michoacán", "Jalisco", "Nuevo León", "Quintana Roo", "Michoacán", "Puebla"]
        costo = 45
        
        self.mostrar_resultado("Recorrido con repeticiones:", recorrido, costo)
        self.resaltar_recorrido(recorrido)
    
    def mostrar_resultado(self, titulo, recorrido, costo):
        self.resultado.config(state=tk.NORMAL)
        self.resultado.delete(1.0, tk.END)
        self.resultado.insert(tk.END, titulo + "\n")
        self.resultado.insert(tk.END, " → ".join(recorrido) + "\n")
        self.resultado.insert(tk.END, f"Costo total: {costo} horas")
        self.resultado.config(state=tk.DISABLED)
    
    def resaltar_recorrido(self, recorrido):
        self.canvas.delete("resaltado")
        
        for i, estado in enumerate(recorrido):
            x, y = self.posiciones[estado]
            color = "#FF5722" if i == 0 else ("#4CAF50" if i == len(recorrido)-1 else "#2196F3")
            self.canvas.create_oval(x-25, y-25, x+25, y+25, outline=color, width=3, tags="resaltado")
        
        for i in range(len(recorrido)-1):
            estado1 = recorrido[i]
            estado2 = recorrido[i+1]
            
            for conexion in self.conexiones:
                if (conexion[0] == estado1 and conexion[1] == estado2) or (conexion[0] == estado2 and conexion[1] == estado1):
                    x1, y1 = self.posiciones[estado1]
                    x2, y2 = self.posiciones[estado2]
                    self.canvas.create_line(x1, y1, x2, y2, width=4, fill="#FFC107", tags="resaltado")
                    break

if __name__ == "__main__":
    root = tk.Tk()
    app = GrafoEstadosApp(root)
    root.mainloop()
