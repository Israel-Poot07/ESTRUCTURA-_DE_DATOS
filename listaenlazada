from dataclasses import dataclass
from typing import Optional


@dataclass
class Node:
    value: int
    nextNode: Optional['Node'] = None


class LinkedList:
    def __init__(self) -> None:
        self._size = 0
        self._firstNode: Optional[Node] = None

    def add(self, position: int, element: int):
        if position < 0 or position > self._size:
            raise IndexError("Position out of range")

        if position == 0:
            self._firstNode = Node(value=element, nextNode=self._firstNode)
        else:
            currentNode = self._firstNode
            for _ in range(position - 1):
                currentNode = currentNode.nextNode
            currentNode.nextNode = Node(value=element, nextNode=currentNode.nextNode)

        self._size += 1

    def delete(self, position: int):
        if position < 0 or position >= self._size:
            raise IndexError("Position out of range")

        if position == 0:
            self._firstNode = self._firstNode.nextNode
        else:
            currentNode = self._firstNode
            for _ in range(position - 1):
                currentNode = currentNode.nextNode
            currentNode.nextNode = currentNode.nextNode.nextNode

        self._size -= 1

    def get(self, position: int) -> int:
        if position < 0 or position >= self._size:
            raise IndexError("Position out of range")

        currentNode = self._firstNode
        for _ in range(position):
            currentNode = currentNode.nextNode
        return currentNode.value

    def getSize(self) -> int:
        return self._size


# Pruebas
example = LinkedList()
example.add(0, 1)
example.add(1, 2)
example.add(2, 3)
print(example.getSize())  # Output: 3
print(example.get(1))     # Output: 2
example.delete(1)
print(example.get(1))     # Output: 3
